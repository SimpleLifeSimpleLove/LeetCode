完全背包问题：
    有一个背包，它的容量为C（Capacity）。现在由n种不同类别的物品，编号为0...n-1，其中每一件物品的重量为w(i)，
    价值为v(i)。问可以向这个背包中盛放哪些物品，使得在不超过背包容量的基础上，物品的总价值最大。

暴力解法：每一件物品放进背包的次数最多为C次：O(n ^ C)

动态规划解法：
    状态：dp(n, C) 考虑将前n个物品放进容量为C的背包，使得价值最大
    状态转移方程：dp(i, c) = max(dp(i-1, c), dp( i , c - w(i)) + v(i))
    具体实现：自上而下（记忆化搜索），自下而上（动态规划）




0-1背包问题：dp(i, c) = max(dp(i-1, c), dp(i-1, c - w(i)) + v(i))
完全背包问题：dp(i, c) = max(dp(i-1, c), dp( i , c - w(i)) + v(i))
    首先，dp(i-1, c)在一维dp中位置和dp(i, c)重合，下面考虑dp(i-1, c - w(i))和dp(i, c - w(i))
    两者唯一的差别在于 i-1 和 i , 体现在两者问题的图示为：是否用到了上一行信息。
    0-1背包问题使用到了上一行的信息，因此使用空间优化后的dp（即一维数组），需要从右向左更新，体现在代码中
就是内层循环递减，对应代码请参照 Knapsack01_dp3
    完全背包问题没有使用到上一行的信息，因此使用空间优化后的dp（即一维数组），需要从左向右更新，体现在代码
中就是内层循环递增，对应代码请参照 KnapsackComplete_dp
