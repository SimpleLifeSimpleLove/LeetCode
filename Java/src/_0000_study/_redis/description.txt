
redis(REmote DIcationary Server):
    远程字典服务器，是一个高性能的key-value分布式内存数据库
    特点：KV、Cache、Persistence
redis在线命令行: https://try.redis.io/
redis学习: https://www.runoob.com/redis/redis-install.html

传统的ACID分别是什么？
    A(Atomicity)    原子性
    C(Consistency)  一致性
    I(Isolation)    隔离性
    D(Durability)   持久性

NoSQL: not only sql
    NoSQL特点：易扩展，大数据量高性能，多样灵活的数据模型
    NoSQL数据模型简介：KV键值、Bson、列族、图形
    NoSQL四大分类：KV键值(redis、memcache、tair)、文档型数据库(Bson格式较多,mongoDB)、
                 列存储数据库(HBase)、图关系数据库(Neo4J、InfoGrid)
    CAP原理(CAP的3进2)：
        C(Consistency)          强一致性
        A(Availability)         可用性
        P(Partition tolerance)  分区容错性
    BASE: 思想是通过让系统放松对某一时刻数据一致性的要求来换取 AP
        基本可用(Basically Available)
        软状态(Soft state)
        最终一致性(Eventually consistent)

CAP的3进2:
    CAP理论的核心是：一个分布式系统不可能同时很好的满足 一致性、可用性 和 分区容错性这三个需求，最多只能较好的满足两个。
    因此，根据CAP原理将 NoSQL 数据库分成满足 CA 原则、满足 CP 原则、满足 AP 原则三大类：
        CA: 单点集群。满足一致性，可用性的系统，通常在可扩展性上不太强大。传统Oracle数据库，RDBMS
        CP: 满足一致性，分区容错性的系统，通常性能不是特别高。Redis、Mongodb
        AP: 满足可用性，分区容错性的系统，通常可能对一致性要求低一些。
            大多数网站架构的选择：比如双十一，可以允许某些数据的不一致（比如浏览量、点赞量等，保证最终一致性即可）

分布式：不同的多态服务器上面步数不同的服务模块（工程），他们之间通过RPC/RMI之间通信和调用，对外提供服务和组内协作。
集群：不同的多态服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。

redis杂项:
    启动redis服务器: redis-server.exe
    启动redis客户端: redis-cli.exe
    关闭redis: 在客户端输入shutdown，服务端就可以关闭

    set k1 v1 : 设置键值对
    get k1 : 获取键 k1 对应的值
    select命令用于切换数据库(一共16个数据库: 0-15, 默认0号库): select 1
    dbsize: 查看当前数据库的key的数量
    keys *: 查看当前库的键值对
    flushdb: 清空当前库
    flushall: 通杀全部库

    统一密码管理，16个库都是同样密码，要么都OK，要么一个也连接不上
    默认端口是6379


redis数据类型(五大数据类型):
    String: 字符串                 最基本的数据类型，一个字符串value最多可以使512M。
    List: 列表                     字符串列表，底层实际是一个链表。
    Set: 集合                      string类型的无序集合，通过HashTable实现的。
    Hash: 哈希                     是一个String类型的field和value的映射表，特别适用于存储对象。
    Zset(sorted set): 有序集合      每个元素会关联一个double类型的分数(分数可重复)，根据分数排序，

    redis命令网址: https://redis.io/commands#

redis键(key):
    keys * : 查看库中的所有键
    exists k1 : 判断以 k1 为键的键值对是否存在
    move k1 2 : 将以 k1 为键的键值对移到2号库中
    expire k1 10 : 设置以 k1 为键的键值对过期时间是10s
    ttl k1 : 查看以 k1 为键的键值对还有多长时间过期(-1表示永不过期, -2表示已经过期)
    type k1 : 查看键 k1 的类型

redis字符串(string): 键值一一对应
    set/get/del/append/strlen
    incr/decr/incrby/decrby     一定要是数字才能进行加减
    getrange/setrange
    setex(set with expire) 键 秒 值 / setnx(set if not exist)
    mset/mget/msetnx
    getset(先get再set)

redis列表(list): 一个键对应多个值
    lpush/rpush/lrange
    lpop/rpop
    lindex : 按照索引下标获得元素(从上到下)
    llen : 获取长度
    lrem key 删N个value : lrem list01 2 3  (删除list01中的2个3)
    ltrim key 开始index 结束index : 截取指定范围的值后再赋值给 key
    rpoplpush 源列表 目的列表
    lset key index value
    linset key before/after 值1 值2

redis集合(set): 一个键对应多个值
    sadd/smembers/sismember
    scard : 获取集合中的元素个数
    srem key value : 删除集合中的元素
    srandmember key 某个整数n : 在集合key中随机选择n个数字
    spop key : 随机出栈
    smove key1 key2 在key1里的某个值 : 作用是将key1里的某个值赋给key2
    数学集合类:
        sdiff
        sinter
        sunion

redis哈希(hash): KV模式不变，但V是一个键值对
    hset/hget/hmset/hmget/hgetall/hdel
    hlen
    hexists key 在key里面的某个值的key
    hkeys/hvals
    hincrby/hincrbyfloat
    hsetnx

redis有序集合(zset): 在set的基础上，加上一个score值。之前是set k1 v1 v2, 现在是zset k1 score1 v1 k2 score2 v2
    zadd/zrange
    zrangebyscore key 开始score 结束score
    zrem key 某score下对应的value值 : 删除元素
    zcard/zcount key score区间/zrank key values值 : 获取下标志/zscore key对应值，获得分数
    zrevrank key values值 : 逆序获得下标值
    zrevrange
    zrevrangebyscore key 开始score 结束score


redis配置文件:
    位置 : redis安装目录下的redis.conf
    INCLUDES : 通过includes包含，redis.conf可以作为总闸，包含其他
    GENERAL :
        daemonize no : 是否以守护进程方式开启，即开启后不显示内容
        pidfile /var/run/redis.pid : 进程管道id文件
        port 6379 : 端口
        tcp-backlog 511 :
            设置tcp的backlog，backlog其实是一个队列，backlog队列总和=未完成三次握手 + 已经完成三次握手队列。
            在高并发环境下你需要一个backlog值来避免慢客户端连接问题。注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值，
            所以需要确认增大somaxconn和tcp_max_syn_backlog两个值来达到想要的效果。
        bind 127.0.0.1 : 端口的绑定




