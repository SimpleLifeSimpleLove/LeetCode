大名鼎鼎的字符串匹配算法：KMP

对于两段字符串 S 和 T，判断 T 是否是 S 的子串
比如：
    S: a b a b a b a b c a
    T: a b a b a b c a

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
KMP算法的核心，是一个被称为部分匹配表(Partial Match Table)的数组。即 PMT 表（和之后的next表基本是一个东西）。

这个表是针对 T 来计算的，计算过程如下：PMT[i] = T[0...i]最长公共 前缀 后缀 的长度(注意：前缀后缀不包含自身)
    PMT[0] = 0, 因为对于字符串 “a” 不存在前缀
    PMT[1] = 0, 因为对于字符串 ”ab", 前缀集合为{"a"}, 后缀集合为{"b"}, 不存在相同的内容
    PMT[2] = 1, 因为对于字符串 ”aba", 前缀集合为{"a", "ab"}, 后缀集合为{"a", "ba"}, 最长的公共前缀后缀为 "a", 长度为 1
    PMT[3] = 2, 因为对于字符串 ”abab", 前缀集合为{"a", "ab", "aba"}, 后缀集合为{"b", "ab", "bab"}, 最长的公共前缀后缀
为 "ab", 长度为2
    PMT[4] = 3, 因为对于字符串 ”ababa", 前缀集合为{"a", "ab", "aba", "abab"}, 后缀集合为{"a", "ba", "aba", "baba"},
最长的公共前缀后缀为 "aba", 长度为3
    PMT[5] = 4, 因为对于字符串 ”ababab", 前缀集合为{"a", "ab", "aba", "abab", "ababa"}, 后缀集合为{"b", "ab", "bab",
"abab", "babab"}, 最长的公共前缀后缀为 "abab", 长度为4
    PMT[6] = 0, 因为对于字符串 ”abababc", 前缀集合为{"a", "ab", "aba", "abab", "ababa", "ababa"}, 后缀集合为{"c",
"bc", "abc", "babc", "ababc", "bababc"}, 没有最长的公共前缀后缀为, 长度为0
    PMT[7] = 1, 因为对于字符串 ”abababca", 前缀集合为{"a", "ab", "aba", "abab", "ababa", "ababa", "ababac"}, 后缀
集合为{"a", "ca", "bca", "abca", "babca", "ababca", "bababca"}, 最长的公共前缀后缀为 "a", 长度为1

比如对于下面这种情况
                   i                                       i
           _______ |                               _______ |
    S: a b a b a b a b c a                  S: a b a b a b a b c a
                                 ===>
       0 1 2 3 4 5 6 7                             0 1 2 3 4 5 6 7
    T: a b a b a b c a                          T: a b a b a b c a
       _______     |                               _______ |
           _______ j                                       j
PMT    0 0 1 2 3 4 0 1
针对这种情况，我们只需要将 j 的位置移动到 T 数组索引为 PMT[6-1]=4 的位置继续和 S 比较即可
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
我们看到，对于每次 j 需要移动的位置有一个偏差(上面的PMT[6-1])，为了计算方便，我们引入 next 数组
next[i] = PMT[i - 1], i >= 1, 所以 next[i] 代表的是 [0...i-1]的最长公共 前缀 后缀 的长度(注意：前缀后缀不包含自身)
next[0] = -1, 另外 next[1] 一定为 0
因此，next: -1 0 0 1 2 3 4 0
next数组的计算过程如下：(T: a b a b a b c a)
    next[0] = -1;
    next[1] = 0;

      i = 1                         next[2] = 0
      |
    a b a b a b c a
      a b a b a b c a
      |
      j = 0

        i = 2                       next[3] = 1     (T[2] = T[0])
        |
    a b a b a b c a
        a b a b a b c a
        |
        j = 0

          i = 3                     next[4] = 2     (T[3] = T[1])
          |
    a b a b a b c a
        a b a b a b c a
          |
          j = 1

            i = 4                   next[5] = 3     (T[4] = T[2])
            |
    a b a b a b c a
        a b a b a b c a
            |
            j = 2

              i = 5                 next[6] = 4     (T[5] = T[3])
              |
    a b a b a b c a
        a b a b a b c a
              |
              j = 3


                i = 6               T[6] != T[4],  j = next[j] = next[4] = 2
                |
    a b a b a b c a
        a b a b a b c a
                |
                j = 4

                i = 6               T[6] != T[2],  j = next[j] = next[2] = 0
                |
    a b a b a b c a
            a b a b a b c a
                |
                j = 2

                i = 6               T[6] != T[0],  j = next[j] = next[0] = -1
                |
    a b a b a b c a
                a b a b a b c a
                |
                j = 0

                i = 6               因为 j = -1, 所以 next[7] = -1 + 1 = 0
                |
    a b a b a b c a
                a b a b a b c a
               |
               j = -1

                  i = 7             i = 7 >= T.length() - 1, 退出循环
                  |
    a b a b a b c a
                  a b a b a b c a
                  |
                  j = 0

参考网址：
    https://www.zhihu.com/question/21923021
    https://www.bilibili.com/video/BV1Px411z7Yo?from=search&seid=8249176121394134058

